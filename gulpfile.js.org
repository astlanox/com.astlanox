var gulp = require("gulp");
var pug = require("gulp-pug");
var data = require("gulp-data");
var sass = require("gulp-sass");
var autoprefixer = require("gulp-autoprefixer");
var cleanCSS = require("gulp-clean-css");
var rename = require("gulp-rename");
var base64 = require("gulp-base64");
var uglify = require("gulp-uglify");
var imagemin = require("gulp-imagemin");
var imageminPngquant = require("imagemin-pngquant");
var imageminMozjpeg = require("imagemin-mozjpeg");
var browserSync = require("browser-sync");
var plumber = require("gulp-plumber");
var notify = require("gulp-notify");

const paths = {
    src: {
        pug: "src/pug/**/*.pug",
        module: "src/pug/**/_*.pug",
        scss: "src/scss/**/*.scss",
        js: "src/js/**/*.js",
        datauri: "src/asset/datauri/*.{png,jpg,gif,svg}",
        locale: "src/locale/**/*.json"
    },
    public: {
        html: "public/",
        css: "public/asset/css/",
        js: "public/asset/js/",
        images: "public/images"
    }
};

gulp.task('pug', function () {
    // locales = require("./locale/#{lang}.json");
    gulp.src(
            ['./src/pug/**/*.pug', '!./src/pug/**/_*.pug']
        )
        .pipe(data(function (file) {
            // var metaData = "src/locale/index_#{lang}.json";
            var metaData = readConfig(`src/locale/index_` + lang + `.json`);
            // var locales = require("locale/#{lang}.json");
            var filePath = file.path.split('\\').join('/');
            var fileName = filePath.split('src/pug')[1].replace('.pug', '.html');
            return metaData[fileName];
        }))
        .pipe(pug({
            pretty: true,
            locals: metaData,
            basedir: 'src/pug'
        }))
        .pipe(gulp.dest("public" + '/' + lang))
});

// gulp.task('pug', function () {u
//     var locales = require ('./locale/index_#{lang}.json');
//     gulp.src(
//             ['./src/pug/**/*.pug', '!./src/pug/**/_*.pug']
//         )
//         .pipe(data(function (file) {
//             var metaData = require('./src/locale/meta.json');
//             var filePath = file.path.split('\\').join('/');
//             var fileName = filePath.split('src/pug')[1].replace('.pug', '.html');
//             return metaData[fileName];
//         }))
//         .pipe(pug({
//             pretty: true,
//             basedir: 'src/pug'
//         }))
//         .pipe(gulp.dest(paths.public.html))
// });


// gulp.task("pug", function(done) {
//   var option = {
//     pretty: true
//   };
//   gulp
//     .src([paths.src.pug, "!" + paths.src.module])
//     .pipe(
//       plumber({
//         errorHandler: notify.onError("Error: <%= error.message %>")
//       })
//     )
//     .pipe(pug(option))
//     .pipe(gulp.dest(paths.public.html));
//   done();
// });

gulp.task("sass", function (done) {
    gulp
        .src(paths.src.scss)
        .pipe(
            plumber({
                errorHandler: notify.onError("Error: <%= error.message %>")
            })
        )
        .pipe(base64())
        .pipe(
            sass({
                outputStyle: "expanded"
            })
        )
        .pipe(
            autoprefixer({
                browsers: ["last 3 versions", "ie >= 9", "Android >= 4", "ios_saf >= 8"]
            })
        )
        .pipe(gulp.dest(paths.public.css))
        .pipe(cleanCSS())
        .pipe(
            rename({
                suffix: ".min"
            })
        )
        .pipe(gulp.dest(paths.public.css));
    done();
});

gulp.task("js", function () {
    return gulp
        .src(paths.src.js)
        .pipe(uglify())
        .pipe(
            rename({
                suffix: ".min"
            })
        )
        .pipe(gulp.dest(paths.public.js));
});

gulp.task("image", function () {
    var option = [
        imageminPngquant({
            quality: "65-80"
        }),
        imageminMozjpeg({
            quality: 85
        }),
        imagemin.gifsicle({
            interlaced: false,
            optimizationLevel: 1,
            colors: 256
        }),
        imagemin.jpegtran(),
        imagemin.optipng(),
        imagemin.svgo()
    ];
    return gulp
        .src(paths.src.datauri)
        .pipe(imagemin(option))
        .pipe(gulp.dest(paths.public));
});

gulp.task("watch", () => {
    gulp.watch(paths.src.scss, gulp.task("sass"));
    gulp.watch(paths.src.pug, gulp.task("pug"));
    gulp.watch(paths.src.datauri, gulp.task("images"));
});